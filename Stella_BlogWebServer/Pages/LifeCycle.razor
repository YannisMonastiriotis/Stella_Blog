@page "/learnBlazor/lifeCycle"
@using System.Threading
<h3>Life Cycle</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<div class="border">
    <_LifeCycleChild CountValue="@currentCount"></_LifeCycleChild>
</div>
<hr />

<br />@Count <button @onclick=StartCountdown>Start Counddown</button>
@foreach(var item in EventType)
{
    @item<hr />
}

@code {
    private int currentCount = 0;
    List<string> EventType = new List<string>();

    private int Count { get; set; } = 5;


    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized is called");
    }

    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync is called");
        await Task.Delay(1000);

    }
    protected override void OnParametersSet() => EventType.Add("OnParameterSet is called");

    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParameterSet is called");
        await Task.Delay(1000);

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            currentCount = 111;
        }
        else
        {
            currentCount = 666;
        }
        EventType.Add("OnAFtER RENDER is called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnafterRenderAsync is called");
        await Task.Delay(1000);
    }

    protected override bool ShouldRender()
    {
        EventType.Add("SHouldRender is called");
        return true;
    }

    void StartCountdown()
    {
        var timer = new Timer(TImeCallBack, null, 1000, 1000);
    }

    void TImeCallBack(object state)
    {
        if(Count >0)
        {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }
}
