@page "/category"
@inject ICategoryRepository _categoryRepository
@inject IJSRuntime _runtime
<_DeleteConfirmation ConfirmDeleteOnClick="ConfirmDelete_Click"></_DeleteConfirmation>

<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Category List</h4>
    </div>
    <div class="col-4 offset-2">
        <a  href="category/create" class="btn btn-primary form-control" style="width:100px">Add new Category</a>
    </div>
    <div class="col-12">
        @if(Categories.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var objCateg in Categories)
                    {
                        <tr>
                            <td class="card-subtitle" align="char" style="text-emphasis-style:initial">
                                @objCateg.Name
                            </td>
                            <td>
                                <NavLink href="@($"category/edit/{objCateg.Id}")" class="btn-primary btn">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(objCateg.Id)">Delete</button>
                            </td>
                          
                        </tr>
                    }
                </tbody>
            </table>
        }
        else{
            if(IsLoading)
            {
                //loading 
                <div class="text-center">
                    <img src="/images/loading.gif" />
                </div>
            }
            else{
                <p>No Records Found!</p>
            }
        }
    </div>
</div>

@code {
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();

    private int DeleteCategoryId { get; set; }

    public bool IsLoading { get; set; } = true;
    private bool IsConfirmed { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadCategories);
    }

    private void LoadCategories()
    {
        Categories = _categoryRepository.GetAll();
        IsLoading = false;
    }

    private void HandleDelete(int id)
    {
        DeleteCategoryId = id;
        _runtime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        if(isConfirmed && DeleteCategoryId!=0)
        {
            //delete
            _categoryRepository.Delete(DeleteCategoryId);
            LoadCategories();
           await _runtime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
    }
}
